<!DOCTYPE html>

<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <title>Registro de Funcionários</title>
    <style>
      h1, h2 {
        text-align: center;
      }
      
      body {
        font-size: 20px;
        font-family: Roboto;
      }
      
      form {
        text-align: center;
      }

      fieldset {
        text-align: left;
        margin: 30px auto;
        padding: 20px;
        max-width: 500px;
        background-color: var(--color3);
        border-radius: 5px;
      }
  
       legend {
        padding: 3px;
        border-radius: 5px;
        max-width: 70%;
        box-shadow: 1px 1px 4px black;
      } 
      
      button {
        padding: 10px;
        font-size: 1.2em;
        border-radius: 5px;
      }
    </style>
</head>

<body>
    <h1>Cadastrar Funcionário</h1>

    <form id="funcionarioForm">
      <fieldset>
        <legend>Dados do Funcionário</legend>
        
        <label for="nome">Nome: </label>
        <input type="text" id="nome" placeholder="Nome completo"><br><br>
        
        <label for="idade">Idade: </label>
        <input type="number" id="idade" placeholder="18" max="99"><br><br>
      
        <label for="cargo">Cargo: </label><br>
          <input id="desenvolvedor" type="radio" value="desenvolvedor" name="cargo" onclick="salvarCargo(this.value)">
            Desenvolvedor(a)</input><br>

          <input id="gerente" type="radio" value="gerente" name="cargo" onclick="salvarCargo(this.value)">
            Gerente</input><br>

          <input id="outroCargo" type="radio" value="outroCargo" name="cargo" onclick="salvarCargo(this.value)">
            Outro</input>
          <input type="text" name="cargo" id="outroCargoTexto" disabled="true" onchange="salvarCargo(this.value)"><br><br>
      
        <label for="departamento">Departamento: </label>
        <input type="text" id="departamento" placeholder="Apenas para Gerente"><br><br>

        <label for="linguagem">Linguagem de Programação: </label>
        <input type="text" id="linguagem" placeholder="Apenas para Desenvolvedor"><br>
      </fieldset>
        <button type="submit">Registrar Novo Funcionário</button>
    </form>
      
    <section>
      <h2>Informações do Funcionário:</h2>
      <div id="infoFuncionario"></div>
    </section>

    <script>
      class Funcionario {
        constructor(nome, idade, cargo) {
          this.nome = nome;
          this.idade = idade;
          this.cargo = cargo;
        }
        
        seApresentar() {
          return `Olá, meu nome é ${this.nome}, tenho ${this.idade} anos e sou ${this.cargo}.`;
        }
        
        trabalhar() {
          return `${this.nome} está trabalhando.`;
        }
      }
      
      class Gerente extends Funcionario {
        constructor(nome, idade, departamento) {
          super(nome, idade, "gerente");
          this.departamento = departamento;
        }
        
        gerenciar() {
          return `${this.nome} está gerenciando o departamento de ${this.departamento}.`;
        }
      }
      
      class Desenvolvedor extends Funcionario {
        constructor(nome, idade, linguagem) {
          super(nome, idade, "desenvolvedor");
          this.linguagem = linguagem;
        }
        
        programar() {
          return `${this.nome} está programando em ${this.linguagem}.`;
        }
      }
      
      function exibirErro(mensagem) {
        const infoFuncionarioDiv = document.getElementById("infoFuncionario");
        infoFuncionarioDiv.innerHTML = `<p style="color: red;">Erro: ${mensagem}</p>`;
      }
      
      let cargoSalvo;
      function salvarCargo(cargoValor) {
        if (document.getElementById("outroCargo").checked) {
          habilitarCargoCustomizado();
        } else {
          desabilitarCargoCustomizado();
        }
        cargoSalvo = cargoValor;
      }
      
      function habilitarCargoCustomizado() {
        document.getElementById("outroCargoTexto").disabled = false;
      }
      
      function desabilitarCargoCustomizado() {
        document.getElementById("outroCargoTexto").disabled = true;
      }

      document.getElementById("funcionarioForm").addEventListener("submit", function (event) {
        event.preventDefault();
        const nome = document.getElementById("nome").value;
        const idade = document.getElementById("idade").value;
        const cargo = cargoSalvo;
        const departamento = document.getElementById("departamento").value;
        const linguagem = document.getElementById("linguagem").value;
        
        try {
          if (!nome || !idade || !cargo) {
            throw new Error("Por favor, preencha todos os campos obrigatórios.");
          }

          if (idade < 18) {
            throw new Error("O funcionário deve ter mais de 18 anos.")
          }
          
          let funcionario;
          
          if (cargo === "gerente") {
            if (!departamento) {
              throw new Error("Departamento é obrigatório para um Gerente.");
            }
            funcionario = new Gerente(nome, idade, departamento);
          
          } else if (cargo === "desenvolvedor") {
            if (!linguagem) {
              throw new Error("Linguagem de programação é obrigatória para um Desenvolvedor.");
            }
            funcionario = new Desenvolvedor(nome, idade, linguagem);
          
          } else {
            funcionario = new Funcionario(nome, idade, cargo);
          }
          
          const infoFuncionarioDiv = document.getElementById("infoFuncionario");
          const infoFuncionarioParagrafo = document.getElementById("infoFuncionario");

          if (cargo === "gerente") {
            infoFuncionarioDiv.innerHTML = `
              <h3>Informações do Funcionário:</h3>
              <p>${funcionario.seApresentar()}</p>
              <p>${funcionario.trabalhar()}</p>
              <p>${funcionario.gerenciar()}</p>
          `;
          } else if (cargo === "desenvolvedor") {
            infoFuncionarioDiv.innerHTML = `
              <h3>Informações do Funcionário:</h3>
              <p>${funcionario.seApresentar()}</p>
              <p>${funcionario.trabalhar()}</p>
              <p>${funcionario.programar()}</p>
          `;
          } else {
            infoFuncionarioDiv.innerHTML = `
              <h3>Informações do Funcionário:</h3>
              <p>${funcionario.seApresentar()}</p>
              <p>${funcionario.trabalhar()}</p>
          `;
          }

        } catch (error) {
          exibirErro(error.message);
        }
      });
    </script>
</body>
</html>
